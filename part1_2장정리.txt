2장 - 데이터모델과 성능 
1. 성능데이터모델링 -> 분석/설계단계에서 

2.데이터 모델링 단계
 정규화 
 DB용량산정 
 발생되는 트랜잭션 유형 파악
 용량/트랜잭션의 유형 에 따라 반정규화
 이력모델의 조정 PK/FK조정 , 슈퍼타입/서브타입 조정 수행 
 성능관점 검증 

3. 1차 정규화 : 
 1) By 칼럼 => 반복적인 속성값 을 갖는 속성 형태 : 원자성 위반 하는 중복속성 
 반복적인 속성 나열 형태 =>or 연산자 + 인덱스 각각 생성 => 성능저하. 
 2) 칼럼 단위에서 중복된 경우 도 1차 정규화 ==> 1: M의 관계 엔터티 
  [26P 38번]

4. 2차 정규화 가 필요한 경우: 부분함수 종속 을 갖는 경우 [1차정규화는 만족한 경우 1차 정규형]
=> PK 한테 모두 종속성을 갖지 않는 경우. => 엔터티를 분리한다.

5.반정규화 고려 => 재현의 적시성 으로 판단. 
 대량의 데이터 : before 반정규화=> 클러스터링/파티션 여부 확인. 
+ IF 하나의 결과셋 추출을 위해서 다량데이터 탐색이 반복적으로 빈번하게 발생한다면 그 때 반정규화 고려
 cf) 이전/이후 레코드 탐색 =>window function 의 lag lead 함수로 가능. 
 cg) 집계 테이블 + 다수 테이블 간의 키 연결 테이블 등 다양한 경우 에 반정규화 필요함.
 
6.반정규화
 정의 : 정규화된 엔터티/속성/관계 = > for 편의성/ 성능향상 => 데이터를 중복/통합/분리 수행
 단점: 데이터 무결성 깨질 위험 
 장점: 데이터 조회시의 I/O 연산 의 성능 개선(조인) 가능.

7테이블 반정규화 기법 (3)
 1) 테이블병합 : 1:1/ 1:M/ 슈퍼/서브타입
 2) 테이블 분할 : 수직/수평분할 
 3) 테이블 추가 : 중복테이블 / 통계테이블 / 이력테이블 / 부분테이블 추가

8. 칼럼 반정규화 (5) 
 1) 중복칼럼 추가
 2) 파생칼럼 추가
 3) 이력테이블 추가 
 4) PK 에 의한 칼럼 추가
 5) 응용시스템 오작동을 위한 칼럼 추가. 

9.반정규화 절차  
 1) 반정규화 대상 조사 - 범위처리빈도수? / 대량의범위처리 ?/ 통계성 프로세스?/테이블 조인 개수?
 2) 다른 대안 검토 - 뷰 / 클러스터링 /인덱스 조정/ 어플리케이션 로직 변경 
 3) 반정규화 적용 - 테이블 반정규화/ 속성 반정규화 / 관계 반정규화 

cf) 반정규화의 대안이 가능한 CASE 
 1) 多 조인 - 뷰
 2) 多 데이터 처리 / 부분처리 -> 클러스터링 / 인덱스 조정 
 3) 多 데이터 - > PK의 성격에 따라 부분적인 테이블로 분리가능 : Partitioning (파티셔닝 ) 
	=>파티셔닝 : 논리적으로는 하나의 테이블을 물리적으로는 여러개의 테이블로 분리 =>access 성능 향상&관리방법개선
 4) 응용로직 변경

10.한 테이블에 多 칼럼 을 갖고 있을 때 발생하는 문제 
 1) 로우 체이닝 :칼럼이 넘쳐서 한 블록에 담지 못하고 다른 블록에 추가로 담겨지는 현상 
	데이터가 물리적으로 넓게 분포할 가능성 O =>디스크 I/O성능 저하 
	=> BY 접근 빈도 => 칼럼 구분 해서 1:1로 테이블 분리 => I/O성능 향상
 2) 로우 마이그레이션 : 칼럼의 변경 후 기존의 블록에 저장되지 못하고 다른 블록에 저장되어 
	데이터가 물리적으로 넓게 분포하게 되는 현상 

11. 슈퍼+ 서브 테이블 변환
 1) 트랜잭션 : 전체를 대상으로 일괄처리 => 슈퍼테이블 과 서브 테이블 통합 하여 하나의 테이블로 구성 
 2) 트랜잭션 : 서브타입 개별로 처리 => 슈퍼테이블 // 서브테이블 분리 => 개별 테이블에서만 연산
 3) 트랜잭션 : 슈퍼타입+ 서브타입에 대해 발생 => 슈퍼타입 + 서브타입 테이블 구성

12.PK 순서결정 기준 : 인덱스 정렬구조를 이해 
앞쪽에 위치한 속성의 값이 '=' or 비교연산자 , <> 연산 , BETWEEN 라면 
해당 속성에 대한 인덱스가 먼저 수행되도록 조정해야 한다. 
	
13.FK 인덱스 생성 
엔터티 간 논리적 관계 =>JOIN발생 =>FK Constraints 생성여부와 관계없이 FOR 성능 향상 => FK 설정된 칼럼 의 인덱스 생성 필요.
cf) FK Constraints : 인스턴스 간의 일관성 보장해주는 '지원 기능' 이지 성능향상 관점과는 거리가 있다. 

14. 분산 데이터베이스 
1)장점 : 지역자치성/점증적 시스템 용량 확장 
           신뢰성&가용성 / 효용성&융통성/빠른응답속도 + 통신비용절감 / 시스템규모 적절하게 조정가능 
           각 지역사용자의 요구 수용 이 증대 가능
 2) 단점 : SW개발비용/ 오류 잠재성 증대/ 처리비용증대/ 설계,관리비용 증가,복장성 증가 / 불규칙한 응답속도/ 통제어려움/무결성위험
3) 4가지 투명성 :지역(위치) 투명성/ 병행 투명성 / 오류(장애) 투명성 /중복 투명성 
4) 활용 : 마스터 데이터의 경우=> 복제 분산 적용 
            거의 실시간 업무적인 특징에 활용 가능 
            백업 사이트를 구성할 때 간단하게 분산기능 적용=> 쉽게 구성 가능 
 CF) GIS(Global Single Instance) 는 분산 DB와 대치되는 개념 